{
	"Controller Template 1": {
		"prefix": "ct1",
		"body": [
			"use App\\Http\\Controllers\\Controller;\r",
			"use Illuminate\\Http\\Request;\r",
			"use Validator;\r",
			"use App\\Models\\\\${1:FooBar};\r",
			"\r",
			"class ${1:FooBar}Controller extends Controller\r",
			"{\r",
			"    public function __construct()\r",
			"    {\r",
			"        \\$this->middleware('scope:${2:foo-bars}::get')->only('index');\r",
			"        \\$this->middleware('scope:${3:foo-bar}::create')->only('store');\r",
			"        \\$this->middleware('scope:${3:foo-bar}::update')->only('update');\r",
			"        \\$this->middleware('scope:${3:foo-bar}::get')->only('show');\r",
			"        \\$this->middleware('scope:${3:foo-bar}::delete')->only('delete');\r",
			"    }\r",
			"\r",
			"    public function index(Request \\$request)\r",
			"    {\r",
			"        \\$apiParam = apiParam()\r",
			"            ->request(\\$request)\r",
			"            ->generate();\r",
			"        \r",
			"        // get data\r",
			"        \\$${4:fooBars} = ${1:FooBar}::usingAPIParam(\\$apiParam);\r",
			"\r",
			"        return customResponse()\r",
			"            ->success()\r",
			"            ->message('Success in Getting ${5:Foo Bars}.')\r",
			"            ->data(\\$${4:fooBars})\r",
			"            ->logName('Get ${5:Foo Bars}')\r",
			"            ->logDesc(\"Total results: {\\$${4:fooBars}->count()}\")\r",
			"            ->generateWithLog();\r",
			"    }\r",
			"\r",
			"    public function show(Request \\$request, \\$${6:fooBar}Id)\r",
			"    {\r",
			"        // resource validation\r",
			"        \\$${6:fooBar} = ${1:FooBar}::find(\\$${6:fooBar}Id);\r",
			"\r",
			"        if (\\$${6:fooBar} === null) {\r",
			"            return customResponse()\r",
			"                ->failed(404)\r",
			"                ->message('${7:Foo Bar} not found.')\r",
			"                ->logName('Get ${7:Foo Bar}')\r",
			"                ->generateWithLog();\r",
			"        }\r",
			"\r",
			"        return customResponse()\r",
			"            ->success()\r",
			"            ->message('Success in Getting ${7:Foo Bar}.')\r",
			"            ->data(\\$${6:fooBar})\r",
			"            ->logName('Get ${7:Foo Bar}')\r",
			"            ->generateWithLog();\r",
			"    }\r",
			"\r",
			"    public function store(Request \\$request)\r",
			"    {\r",
			"        // request validation\r",
			"        \\$validator = Validator::make(\r",
			"            \\$request->all(),\r",
			"            [\r",
			"                ${8:#Create Validations}\r",
			"            ]\r",
			"        );\r",
			"\r",
			"        if (\\$validator->fails()) {\r",
			"            return customResponse()\r",
			"                ->failed()\r",
			"                ->message('Please fill out the fields properly.')\r",
			"                ->errors(\\$validator->errors())\r",
			"                ->logName('Create ${7:Foo Bar}')\r",
			"                ->generateWithLog();\r",
			"        }\r",
			"\r",
			"        // create\r",
			"        \\$${6:fooBar} = ${1:FooBar}::create(\\$request->all());\r",
			"\r",
			"        return customResponse()\r",
			"            ->success(201)\r",
			"            ->message('Success in Creating ${7:Foo Bar}.')\r",
			"            ->logName('Create ${7:Foo Bar}')\r",
			"            ->generateWithLog();\r",
			"    }\r",
			"\r",
			"    public function update(Request \\$request, \\$${6:fooBar}Id)\r",
			"    {\r",
			"        // resource validation\r",
			"        \\$${6:fooBar} = ${1:FooBar}::find(\\$${6:fooBar}Id);\r",
			"\r",
			"        if (\\$${6:fooBar} === null) {\r",
			"            return customResponse()\r",
			"                ->failed(404)\r",
			"                ->message('${7:Foo Bar} not found.')\r",
			"                ->logName('Update ${7:Foo Bar}')\r",
			"                ->generateWithLog();\r",
			"        }\r",
			"\r",
			"        // request validation\r",
			"        \\$validator = Validator::make(\r",
			"            \\$request->all(), \r",
			"            [\r",
			"                ${9:#Update Validations}\r",
			"            ]\r",
			"        );\r",
			"\r",
			"        if (\\$validator->fails()) {\r",
			"            return customResponse()\r",
			"                ->failed()\r",
			"                ->message('Please fill out the fields properly.')\r",
			"                ->errors(\\$validator->errors())\r",
			"                ->logName('Update ${7:Foo Bar}')\r",
			"                ->generateWithLog();\r",
			"        }\r",
			"\r",
			"        // update\r",
			"        \\$${6:fooBar}->update(\\$request->all());\r",
			"\r",
			"        return customResponse()\r",
			"            ->success()\r",
			"            ->message('Success in Updating ${7:Foo Bar}.')\r",
			"            ->logName('Update ${7:Foo Bar}')\r",
			"            ->generateWithLog();\r",
			"    }\r",
			"\r",
			"    public function destroy(Request \\$request, \\$${6:fooBar}Id)\r",
			"    {\r",
			"        // resource validation\r",
			"        \\$${6:fooBar} = ${1:FooBar}::find(\\$${6:fooBar}Id);\r",
			"\r",
			"        if (\\$${6:fooBar} === null) {\r",
			"            return customResponse()\r",
			"                ->failed(404)\r",
			"                ->message('${7:Foo Bar} not found.')\r",
			"                ->logName('Delete ${7:Foo Bar}')\r",
			"                ->generateWithLog();\r",
			"        }\r",
			"\r",
			"        // delete\r",
			"        \\$${6:fooBar}->delete();\r",
			"\r",
			"        return customResponse()\r",
			"            ->success()\r",
			"            ->message('Success in Deleting ${7:Foo Bar}.')\r",
			"            ->logName('Delete ${7:Foo Bar}')\r",
			"            ->generateWithLog();\r",
			"    }\r",
			"    $0\r",
			"}"
		],
		"description": "Controller Template 1"
	},

	"Test Permission Seeder Template 1": {
		"prefix": "tpst1",
		"body": [
			"\r",
			"namespace Database\\Seeders\\Tests;\r",
			"\r",
			"use Illuminate\\Database\\Seeder;\r",
			"use App\\Models\\Systems\\Permission;\r",
			"use App\\Models\\Systems\\UserType;\r",
			"use App\\Models\\Systems\\UserTypePermission;\r",
			"\r",
			"class ${1:FooBar}PermissionSeeder extends Seeder\r",
			"{\r",
			"    /**\r",
			"     * Run the database seeds.\r",
			"     *\r",
			"     * @return void\r",
			"     */\r",
			"    public function run()\r",
			"    {\r",
			"        // add test permissions\r",
			"        \\$permissions = [\r",
			"            '${2:foo-bars}::get'   => 'Get ${4:Foo Bars}',\r",
			"            '${3:foo-bar}::create' => 'Create ${5:Foo Bar}',\r",
			"            '${3:foo-bar}::update' => 'Update ${5:Foo Bar}',\r",
			"            '${3:foo-bar}::get'    => 'Get ${5:Foo Bar}',\r",
			"            '${3:foo-bar}::delete' =>'Delete ${5:Foo Bar}'\r",
			"        ];\r",
			"\r",
			"        foreach (\\$permissions as \\$permissionName => \\$permissionDesc) {\r",
			"\r",
			"            Permission::create([\r",
			"                'permission_name' => \\$permissionName,\r",
			"                'permission_desc' => \\$permissionDesc\r",
			"            ]);\r",
			"        }\r",
			"\r",
			"        // assign the permissions to super admin\r",
			"        \\$userTypes = UserType::ofName('Super Administrator')->get();\r",
			"        \\$permissions = Permission::ofNameLike('${3:foo-bar}%')->get();\r",
			"\r",
			"        foreach (\\$userTypes as \\$userType) {\r",
			"\r",
			"            foreach (\\$permissions as \\$permission) {\r",
			"                UserTypePermission::create([\r",
			"                    'user_type_id' => \\$userType->user_type_id,\r",
			"                    'permission_id' => \\$permission->permission_id,\r",
			"                ]);\r",
			"            }\r",
			"        }\r",
			"    }\r",
			"}\r",
			""
		],
		"description": "Test Permission Seeder Template 1"
	}
}